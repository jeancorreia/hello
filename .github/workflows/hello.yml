name: Meu Primeiro CI com GitHub Actions

# Permissao do Pipeline
permissions:
  contents: read
  pull-requests: write

# Define quando o workflow será executado
on:
  # Roda o workflow em cada push para qualquer branch
  push:
    branches:
      - master 

  # Roda o workflow quando um pull request é aberto ou atualizado para a branch principal
  pull_request:
    branches:
      - master

  # Permite que você execute o workflow manualmente da aba "Actions" do GitHub
  workflow_dispatch:

# Define os jobs (tarefas) que serão executados
jobs:
  CI_CD_Pipeline:
    # O ambiente onde este job será executado. 'ubuntu-latest' é uma VM Linux hospedada pelo GitHub.
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Faz o checkout do seu código do repositório
      # Isso torna o código da sua aplicação disponível para os passos seguintes.
      - name: Checkout do código
        uses: actions/checkout@v4

      # Passo 2: Validacao de SAST
      - name: SAST
        id: grep_search # Dá um ID para este passo, útil para referenciar
        run: |
          # Define a palavra ou padrão que você está procurando
          PALAVRA_CHAVE="Azul"
          # Define o arquivo onde a busca será feita
          ARQUIVO_ALVO="hello.py" # Altere para o arquivo que você quer verificar

          # Usa grep para procurar a palavra-chave.
          # -q: modo silencioso (não imprime o resultado, apenas o código de saída)
          # || true: isso garante que o comando grep em si não falhe o step imediatamente
          #         se a palavra não for encontrada. A lógica de falha será manual.
          if grep -q "${PALAVRA_CHAVE}" "${ARQUIVO_ALVO}"; then
            echo "::notice file=${ARQUIVO_ALVO}::A palavra '${PALAVRA_CHAVE}' foi encontrada. O check passou."
            # Você pode definir uma saída para o passo se precisar
            echo "result=found" >> $GITHUB_OUTPUT
          else
            echo "::error file=${ARQUIVO_ALVO}::ERRO: A palavra '${PALAVRA_CHAVE}' NÃO foi encontrada em '${ARQUIVO_ALVO}'. Quebrando o pipeline."
            # Usa 'exit 1' para forçar a falha do job/workflow
            exit 1
          fi
          # Se você preferir que o grep falhe o step automaticamente, remova o '|| true' e o 'if/else',
          # mas a mensagem de erro do GitHub Actions pode não ser tão clara.
          # run: grep -q "${PALAVRA_CHAVE}" "${ARQUIVO_ALVO}"

      # Passo 3: Configura o ambiente Python
      # Se sua aplicação for em outra linguagem (Node.js, Java, Go), você usaria a ação correspondente.
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a versão do Python que seu projeto precisa (ex: '3.9', '3.10')

      # Passo 4: Instala as dependências (se houver)
      # Se você tivesse um requirements.txt, faria: pip install -r requirements.txt
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          # Se você tivesse dependências, faria:
          # pip install -r requirements.txt

      # Passo 5: Executa a aplicação
      # Este passo executa o script hello.py
      - name: Rodar a aplicação
        run: python hello.py

      # Passo 6: Exemplo de teste (simples)
      # Em uma aplicação real, você teria testes de unidade, integração, etc.
      - name: Executar um "teste" simples
        run: |
          echo "Verificando se a aplicação rodou sem erros..."
          # Aqui você colocaria comandos de teste reais, como:
          # pytest # para testes Python
          # npm test # para testes Node.js
          # mvn test # para testes Java
          echo "Teste simples concluído com sucesso!"