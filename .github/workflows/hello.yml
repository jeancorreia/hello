name: Meu Primeiro CI com GitHub Actions

# Permissao do Pipeline
permissions:
  contents: read
  pull-requests: write

# Define o criterio de start do Pipeline
on:
  # Roda em cada push para qualquer branch
  push:
    branches:
      - master 

  # Roda quando um pull request é aberto ou atualizado para a branch principal
  pull_request:
    branches:
      - master

  # Permite que você execute manualmente da aba "Actions" do GitHub
  workflow_dispatch:

# Define os jobs (tarefas) que serão executados
jobs:
  CI_CD_Pipeline:
    # O ambiente onde este job será executado. 'ubuntu-latest' é uma VM Linux hospedada pelo GitHub.
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Faz o checkout do seu código do repositório
      # Isso torna o código da sua aplicação disponível para os passos seguintes.
      - name: Checkout do código
        uses: actions/checkout@v4

      # Passo 2: Validacao de SAST
      - name: SAST
        id: grep_search # Dá um ID para este passo, útil para referenciar
        run: |
          # Define a palavra ou padrão que você está procurando
          PALAVRA_CHAVE="Verde"
          # Define o arquivo onde a busca será feita
          ARQUIVO_ALVO="hello.py" # Altere para o arquivo que você quer verificar

          # Usa grep para procurar a palavra-chave.
          # -q: modo silencioso (não imprime o resultado, apenas o código de saída)
          # || true: isso garante que o comando grep em si não falhe o step imediatamente
          #         se a palavra não for encontrada. A lógica de falha será manual.
          if grep -q "${PALAVRA_CHAVE}" "${ARQUIVO_ALVO}"; then
            echo "::notice file=${ARQUIVO_ALVO}::A palavra '${PALAVRA_CHAVE}' foi encontrada. O check passou."
            # Você pode definir uma saída para o passo se precisar
            echo "result=found" >> $GITHUB_OUTPUT
          else
            echo "::error file=${ARQUIVO_ALVO}::ERRO: A palavra '${PALAVRA_CHAVE}' NÃO foi encontrada em '${ARQUIVO_ALVO}'. Quebrando o pipeline."
            # Usa 'exit 1' para forçar a falha do job/workflow
            exit 1
          fi
          # Se você preferir que o grep falhe o step automaticamente, remova o '|| true' e o 'if/else',
          # mas a mensagem de erro do GitHub Actions pode não ser tão clara.
          # run: grep -q "${PALAVRA_CHAVE}" "${ARQUIVO_ALVO}"

      # Passo 3: Configura o ambiente Python
      # Se sua aplicação for em outra linguagem (Node.js, Java, Go), você usaria a ação correspondente.
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a versão do Python que seu projeto precisa (ex: '3.9', '3.10')

      # Passo 4: Instala as dependências (se houver)
      # Se você tivesse um requirements.txt, faria: pip install -r requirements.txt
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          # Se você tivesse dependências, faria:
          # pip install -r requirements.txt
  
      # Passo 5: Executa a aplicação
      # Este passo executa o script hello.py
      - name: Rodar a aplicação
        run: python hello.py
        
#==================================================================================
# Grupo de Tarefas de Testes em Geral: Segurança, Funcional, Unitario, etc.
#==================================================================================

      # Passo 6: Exemplo de teste (simples)
      # Em uma aplicação real, você teria testes de unidade, integração, etc.
      - name: Exemplo um "teste" simples
        run: |
          echo "Verificando se a aplicação rodou sem erros..."
          # => Aqui você colocaria comandos de teste reais, como:
          echo "Teste simples concluído com sucesso!"
          
      # Passo 7: SAST Bandit
      - name: Install Bandit
        run: |
          pip install bandit bandit_sarif_formatter # Instala a ferramenta Bandit
               
      - name: Executar Bandit Scan and Gerar relatorio SARIF
        # Comando para rodar o Bandit
        # -r .: Recursivamente escaneia o diretório atual
        # -f sarif: Gera o relatório no formato SARIF (essencial para GitHub Code Scanning)
        # -o bandit-results.sarif: Salva o relatório no arquivo especificado
        # --sev high: Opcional, fará o bandit retornar um código de erro se encontrar vulnerabilidades 'high' ou superiores.
        #             Isso pode ser usado para quebrar o pipeline diretamente ANTES do upload SARIF.
        #             Para integração com GHAS, o upload SARIF e as regras de proteção de branch são a forma preferencial de quebra.
        run: bandit -r . --format sarif -o bandit-results.sarif --exclude .venv,.git,migrations,tests # Exclua pastas que não precisam ser escaneadas
         continue-on-error: true # Opcional: Descomente isso se você quiser que o passo continue mesmo se o bandit encontrar erros,
                                  # mas ainda carregar os resultados para o GitHub Security tab.
                                  # Útil para feedback inicial, mas não para bloqueio rigoroso.

      - name: Upload relatorio SARIF para o GitHub Code Scanning
        # Esta ação do GitHub faz o upload do arquivo SARIF gerado pelo Bandit
        # para a aba "Security" do seu repositório no GitHub.
        # O GitHub então processará este relatório e criará/atualizará os alertas de segurança.
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif # O arquivo SARIF gerado pelo Bandit
          # category: bandit-scan # Opcional: Adicione uma categoria para o scan se você usar múltiplos scanners

      - name: SAST Scan Concluido
        run: echo "Bandit scan completed. Check GitHub Security tab for details and alerts." 
          